# do something in each subdirectory of current directory

emulate -L zsh

{
    setopt localoptions localtraps

    # handle Ctrl+C interrupts
    TRAPINT () {
        echo ${fg[white]}"--- IED: Caught SIGINT, aborting."${fg[default]}
        return $(( 128 + $1 ))
    }

    local cwd dir exitcode ied_opts
    local -A ied_status
    cwd=$PWD

    zparseopts -E -D -M -A ied_opts -- -ignore-errors -status-table i=-ignore-errors s=-status-table

    if [[ $# -eq 0 ]]; then
        cat <<- EOH
Usage: ineachdir [-i | --ignore-errors] [-s | --status-table] <command>

Perform specified <command> in each directory.

Arguments:
-i, --ignore-errors    Ignore <command> execution error,
                       continue to next dir

-s, --status-table     Show status table at the end

Example:
ineachdir -s git pull --prune
EOH
        return 0
    fi

    for dir in */; do
        echo ${fg[white]}"--- IED: Executing '$@' in '$cwd/$dir'..."${fg[default]}
        cd $cwd/$dir
        $@
        exitcode=$?
        if (( ${+ied_opts[--status-table]} )); then
            ied_status[$dir]=$exitcode
        fi
        if [[ $exitcode -ne 0 ]]; then
            if (( ${+ied_opts[--ignore-errors]} )); then
                echo ${fg[yellow]}"--- IED: '$@' returned $exitcode, ignoring."${fg[default]}
            else
                echo ${fg[red]}"--- IED: '$@' returned $exitcode, aborting."${fg[default]}
                return $(( 128 + $exitcode ))
            fi
        fi
        echo
    done

    if (( ${+ied_opts[--status-table]} )); then
        echo ${fg[white]}"--- IED: Execution results"${fg[default]}
        for dir exitcode in ${(kv)ied_status}; do
            if [[ $exitcode -ne 0 ]]; then
                exitcode="${fg[yellow]}$exitcode${fg[default]}"
            fi
            printf '%s\n' "${(r:35:)dir}: ${(%)exitcode}"
        done
    fi
} always {
    cd $cwd
    unfunction TRAPINT
}

# vim: ft=zsh
